#!/usr/bin/env zsh
# _rick_menu_navigate - Navigate through a menu with keyboard
#
# Usage:
#   _rick_menu_navigate <title> <item1> <item2> ... <itemN>
#
# Arguments:
#   title - Title of the menu (optional, pass empty string for no title)
#   item1..N - Menu items to display
#
# Returns:
#   Echoes the selected index (starting from 0) to stdout
#   Returns -1 if menu was cancelled
#
# Example:
#   selected=$(_rick_menu_navigate "Choose an option" "Option 1" "Option 2")

_rick_menu_navigate() {
  # Check for empty arguments
  if [[ $# -eq 0 ]]; then
    # Nothing to navigate, return error
    echo "-1"
    return 1
  fi
  
  # Extract title (first argument)
  local title="$1"
  shift
  
  # Initialize variables
  local running=1
  local current_index=0
  local max_index=$(( $# - 1 ))
  local width=80  # Default width
  local menu_items=("$@")
  local debug_info=""
  
  # Get terminal width if available
  if command -v tput >/dev/null 2>&1; then
    width=$(tput cols)
    # Ensure reasonable width (between 40-120 characters)
    (( width < 40 )) && width=40
    (( width > 120 )) && width=120
  fi
  
  # Initialize key trackers for ESC detection
  local key=""
  local consecutive_esc_count=0
  
  # Main loop
  while (( running )); do
    # Clear screen
    _rick_menu_clear || true
    
    # Draw title if provided
    if [[ -n "$title" ]]; then
      _rick_menu_centered "$title" "title" "$width" || true
      echo
      _rick_menu_separator "$width" "-" "header" || true
      echo
    fi
    
    # Draw items - use the array for safer access
    for ((i=0; i<=max_index; i++)); do
      local is_selected=0
      [[ $i -eq $current_index ]] && is_selected=1
      
      # Get the item from the array (arrays are 1-indexed in zsh)
      local item_text="${menu_items[$i+1]}"
      
      # Call item display with error handling
      if ! _rick_menu_item "$i" "$item_text" "$is_selected"; then
        debug_info="Error in _rick_menu_item (index: $i, text: $item_text, selected: $is_selected)"
        if (( RICK_DEBUG )); then
          echo "DEBUG: $debug_info" >&2
        fi
      fi
      echo
    done
    
    # Draw footer
    echo
    if ! _rick_menu_footer "$width"; then
      debug_info="Error in _rick_menu_footer (width: $width)"
      if (( RICK_DEBUG )); then
        echo "DEBUG: $debug_info" >&2
      fi
    fi
    
    # Handle key press
    key=$(_rick_menu_read_key)
    if (( RICK_DEBUG )); then
      echo "DEBUG: Key read: '$key'" >&2
    fi
    
    # Get the appropriate action for this key
    action=$(_rick_menu_handle_key "$key" "$current_index" "$max_index")
    
    # Debug the action
    if (( RICK_DEBUG )); then
      echo "DEBUG: Action: '$action'" >&2
    fi
    
    # Handle action
    case "$action" in
      "UP")
        # Move up with wraparound
        if (( current_index == 0 )); then
          current_index=$max_index
        else
          ((current_index--))
        fi
        if (( RICK_DEBUG )); then
          echo "DEBUG: Moving UP to index $current_index" >&2
        fi
        ;;
        
      "DOWN")
        # Move down with wraparound
        if (( current_index == max_index )); then
          current_index=0
        else
          ((current_index++))
        fi
        if (( RICK_DEBUG )); then
          echo "DEBUG: Moving DOWN to index $current_index" >&2
        fi
        ;;
        
      "SELECT")
        # Exit loop and return success
        if (( RICK_DEBUG )); then
          echo "DEBUG: SELECT action received, returning index $current_index" >&2
        fi
        running=0
        ;;
        
      "CANCEL")
        # Exit loop and return cancel (-1)
        if (( RICK_DEBUG )); then
          echo "DEBUG: CANCEL action received (ESC key), exiting menu with index -1" >&2
          echo "DEBUG: key='$key', action='$action'" >&2
        fi
        current_index=-1
        running=0
        ;;
        
      [0-9]*)
        # Direct numeric selection
        if (( action >= 0 && action <= max_index )); then
          if (( RICK_DEBUG )); then
            echo "DEBUG: Numeric selection, setting index to $action" >&2
          fi
          current_index=$action
        else
          if (( RICK_DEBUG )); then
            echo "DEBUG: Numeric selection $action out of range, ignoring" >&2
          fi
        fi
        ;;
        
      *)
        # Unrecognized action
        if (( RICK_DEBUG )); then
          echo "DEBUG: Unrecognized action: '$action', ignoring" >&2
        fi
        ;;
    esac
  done
  
  # Return the selected index
  echo "$current_index"
  return 0
}

# Helper function to safely restore terminal state
_rick_menu_cleanup_navigate() {
  local stty_settings="$1"
  
  # Restore terminal settings
  if [[ -n "$stty_settings" ]]; then
    stty "$stty_settings" 2>/dev/null || stty sane 2>/dev/null || true
  else
    stty sane 2>/dev/null || true
  fi
  
  # Show cursor
  printf "\033[?25h"
  
  # Clear screen to leave a clean state
  _rick_menu_clear
  
  # Remove trap
  trap - INT TERM HUP
}

# Call the function with the arguments passed to this script
_rick_menu_navigate "$@" 