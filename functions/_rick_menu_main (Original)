#!/usr/bin/env zsh
# _rick_menu_main - Display the main Rick Assistant menu
#
# Usage: _rick_menu_main
# Returns: 0 on success, 1 on error

_rick_menu_main() {
  # Define menu title
  local menu_title="RICK ASSISTANT PORTAL"
  
  # Define menu categories with icons
  local -a menu_categories=(
    "🧠 Brain Module"
    "💻 Shell Commands"
    "📊 System Monitoring"
    "⚙️ Settings"
    "❓ Help"
    "🚪 Exit"
  )
  
  # Loop until user exits
  while true; do
    # Display the menu and get selection
    _rick_menu_simple_arrows "$menu_title" "${menu_categories[@]}"
    local choice=$?
    
    # Process selection
    case $choice in
      0) 
        # Menu was cancelled
        return 0
        ;;
      1)
        # Brain Module
        _rick_menu_brain_simple_arrows
        ;;
      2)
        # Shell Commands
        _rick_menu_shell_simple_arrows
        ;;
      3)
        # System Monitoring
        _rick_menu_monitoring_simple_arrows
        ;;
      4)
        # Settings
        _rick_menu_settings_simple_arrows
        ;;
      5)
        # Help
        echo "Help is not implemented yet!"
        read -k 1 -s
        ;;
      6)
        # Exit
        return 0
        ;;
    esac
  done
  
  return 0
}

# Brain Module submenu
_rick_menu_brain_simple_arrows() {
  # Define menu title
  local menu_title="RICK ASSISTANT: BRAIN MODULE"
  
  # Define menu items
  local -a menu_items=(
    "🤖 AI Models"
    "😈 Personality"
    "💬 Responses"
    "🔥 Sassiness Level"
    "↩️ Back to Main Menu"
  )
  
  # Display the menu and get selection
  _rick_menu_simple_arrows "$menu_title" "${menu_items[@]}"
  local choice=$?
  
  # Process selection
  case $choice in
    0|5) 
      # Menu was cancelled or Back selected
      return 0
      ;;
    *)
      # Other options
      echo "This feature is not implemented yet!"
      read -k 1 -s
      ;;
  esac
  
  return 0
}

# Shell Commands submenu
_rick_menu_shell_simple_arrows() {
  # Define menu title
  local menu_title="RICK ASSISTANT: SHELL COMMANDS"
  
  # Define menu items
  local -a menu_items=(
    "❓ !help - List all commands"
    "🧠 !rick - Toggle Rick mode"
    "⚙️ !config - Configure Rick Assistant"
    "📋 !explain - Explain previous command"
    "🔍 !fortune - Get Rick wisdom"
    "↩️ Back to Main Menu"
  )
  
  # Display the menu and get selection
  _rick_menu_simple_arrows "$menu_title" "${menu_items[@]}"
  local choice=$?
  
  # Process selection
  case $choice in
    0|6) 
      # Menu was cancelled or Back selected
      return 0
      ;;
    *)
      # Other options
      echo "This command is not implemented yet!"
      read -k 1 -s
      ;;
  esac
  
  return 0
}

# System Monitoring submenu
_rick_menu_monitoring_simple_arrows() {
  # Define menu title
  local menu_title="RICK ASSISTANT: SYSTEM MONITORING"
  
  # Get system metrics
  local cpu_usage=$(_rick_get_cpu_usage 2>/dev/null || echo "N/A")
  local ram_usage=$(_rick_get_ram_usage 2>/dev/null || echo "N/A")
  local disk_space=$(_rick_get_disk_usage 2>/dev/null || echo "N/A")
  local temp=$(_rick_get_temperature 2>/dev/null || echo "N/A")
  local uptime=$(_rick_get_uptime 2>/dev/null || echo "N/A")
  
  # Define menu items with current metrics
  local -a menu_items=(
    "🔥 CPU Usage: $cpu_usage%"
    "💾 RAM Usage: $ram_usage%"
    "💿 Disk Space Used: $disk_space%"
    "🌡️ Temperature: $temp°C"
    "⏱️ Uptime: $uptime"
    "🔄 Refresh Metrics"
    "↩️ Back to Main Menu"
  )
  
  # Display the menu and get selection
  _rick_menu_simple_arrows "$menu_title" "${menu_items[@]}"
  local choice=$?
  
  # Process selection
  case $choice in
    0) 
      # Menu was cancelled
      return 0
      ;;
    6)
      # Refresh Metrics - just call the function again
      _rick_menu_monitoring_simple_arrows
      ;;
    7)
      # Back to Main Menu
      return 0
      ;;
    *)
      # For other menu items, just display a message
      echo "This is a display-only metric."
      read -k 1 -s
      _rick_menu_monitoring_simple_arrows
      ;;
  esac
  
  return 0
}

# Settings submenu
_rick_menu_settings_simple_arrows() {
  # Define menu title
  local menu_title="RICK ASSISTANT: SETTINGS"
  
  # Get current settings
  local use_python=$(_rick_get_config_value "ui.use_python_menu" || echo "false")
  local animations=$(_rick_get_config_value "ui.animations" || echo "true")
  local unicode=$(_rick_get_config_value "ui.unicode" || echo "true")
  local show_metrics=$(_rick_get_config_value "ui.show_metrics" || echo "true")
  
  # Create status marks for each setting
  local python_status="❌"
  [[ "$use_python" == "true" ]] && python_status="✅"
  
  local anim_status="❌"
  [[ "$animations" == "true" ]] && anim_status="✅"
  
  local unicode_status="❌"
  [[ "$unicode" == "true" ]] && unicode_status="✅"
  
  local metrics_status="❌"
  [[ "$show_metrics" == "true" ]] && metrics_status="✅"
  
  # Define menu items with current status
  local -a menu_items=(
    "🔧 General Settings"
    "😈 Personality Settings"
    "💄 UI Settings"
    "🐍 Use Python Menu [$python_status]"
    "🎬 Animations [$anim_status]"
    "🌐 Unicode [$unicode_status]"
    "📊 Show System Metrics [$metrics_status]"
    "↩️ Back to Main Menu"
  )
  
  # Display the menu and get selection
  _rick_menu_simple_arrows "$menu_title" "${menu_items[@]}"
  local choice=$?
  
  # Process selection
  case $choice in
    0) 
      # Menu was cancelled
      return 0
      ;;
    1)
      # General Settings
      _rick_menu_general_settings_simple_arrows
      _rick_menu_settings_simple_arrows  # Refresh menu after returning
      ;;
    2|3)
      # Personality/UI Settings
      echo "This settings page is not implemented yet!"
      read -k 1 -s
      _rick_menu_settings_simple_arrows  # Refresh menu after returning
      ;;
    4)
      # Toggle Python Menu
      if [[ "$use_python" == "true" ]]; then
        _rick_set_config_value "ui.use_python_menu" "false"
        echo "Python menu disabled!"
      else
        _rick_set_config_value "ui.use_python_menu" "true"
        echo "Python menu enabled!"
      fi
      read -k 1 -s
      _rick_menu_settings_simple_arrows  # Refresh menu after returning
      ;;
    5)
      # Toggle Animations
      if [[ "$animations" == "true" ]]; then
        _rick_set_config_value "ui.animations" "false"
        echo "Animations disabled!"
      else
        _rick_set_config_value "ui.animations" "true"
        echo "Animations enabled!"
      fi
      read -k 1 -s
      _rick_menu_settings_simple_arrows  # Refresh menu after returning
      ;;
    6)
      # Toggle Unicode
      if [[ "$unicode" == "true" ]]; then
        _rick_set_config_value "ui.unicode" "false"
        echo "Unicode disabled!"
      else
        _rick_set_config_value "ui.unicode" "true"
        echo "Unicode enabled!"
      fi
      read -k 1 -s
      _rick_menu_settings_simple_arrows  # Refresh menu after returning
      ;;
    7)
      # Toggle Show System Metrics
      if [[ "$show_metrics" == "true" ]]; then
        _rick_set_config_value "ui.show_metrics" "false"
        echo "System metrics hidden!"
      else
        _rick_set_config_value "ui.show_metrics" "true"
        echo "System metrics shown!"
      fi
      read -k 1 -s
      _rick_menu_settings_simple_arrows  # Refresh menu after returning
      ;;
    8)
      # Back to Main Menu
      return 0
      ;;
  esac
  
  return 0
}

# General Settings submenu
_rick_menu_general_settings_simple_arrows() {
  # Define menu title
  local menu_title="RICK ASSISTANT: GENERAL OPTIONS"
  
  # Get current settings
  local enabled=$(_rick_get_config_value "enabled" || echo "true")
  local log_level=$(_rick_get_config_value "log_level" || echo "info")
  local startup_msg=$(_rick_get_config_value "startup_message" || echo "true")
  local zsh_hooks=$(_rick_get_config_value "zsh_hooks.enabled" || echo "true")
  local p10k_integration=$(_rick_get_config_value "p10k_integration.enabled" || echo "true")
  
  # Create status marks for each setting
  local enabled_status="❌"
  [[ "$enabled" == "true" ]] && enabled_status="✅"
  
  local startup_msg_status="❌"
  [[ "$startup_msg" == "true" ]] && startup_msg_status="✅"
  
  local zsh_hooks_status="❌"
  [[ "$zsh_hooks" == "true" ]] && zsh_hooks_status="✅"
  
  local p10k_status="❌"
  [[ "$p10k_integration" == "true" ]] && p10k_status="✅"
  
  # Define menu items with current status
  local -a menu_items=(
    "🔌 Rick Assistant Enabled [$enabled_status]"
    "📝 Log Level [$log_level]"
    "👋 Startup Message [$startup_msg_status]"
    "🪝 ZSH Hooks [$zsh_hooks_status]"
    "💎 Powerlevel10k Integration [$p10k_status]"
    "↩️ Back to Settings Menu"
  )
  
  # Display the menu and get selection
  _rick_menu_simple_arrows "$menu_title" "${menu_items[@]}"
  local choice=$?
  
  # Process selection
  case $choice in
    0) 
      # Menu was cancelled
      return 0
      ;;
    1)
      # Toggle Rick Assistant Enabled
      if [[ "$enabled" == "true" ]]; then
        _rick_set_config_value "enabled" "false"
        echo "Rick Assistant disabled! I hope you know what you're doing!"
      else
        _rick_set_config_value "enabled" "true"
        echo "Rick Assistant enabled! I'm back, baby!"
      fi
      read -k 1 -s
      _rick_menu_general_settings_simple_arrows  # Refresh menu after returning
      ;;
    2)
      # Cycle Log Level
      local new_log_level
      case "$log_level" in
        "debug") new_log_level="info" ;;
        "info") new_log_level="warn" ;;
        "warn") new_log_level="error" ;;
        "error") new_log_level="debug" ;;
        *) new_log_level="info" ;;
      esac
      _rick_set_config_value "log_level" "$new_log_level"
      echo "Log level set to ${new_log_level}!"
      read -k 1 -s
      _rick_menu_general_settings_simple_arrows  # Refresh menu after returning
      ;;
    3)
      # Toggle Startup Message
      if [[ "$startup_msg" == "true" ]]; then
        _rick_set_config_value "startup_message" "false"
        echo "Startup message disabled!"
      else
        _rick_set_config_value "startup_message" "true"
        echo "Startup message enabled!"
      fi
      read -k 1 -s
      _rick_menu_general_settings_simple_arrows  # Refresh menu after returning
      ;;
    4)
      # Toggle ZSH Hooks
      if [[ "$zsh_hooks" == "true" ]]; then
        _rick_set_config_value "zsh_hooks.enabled" "false"
        echo "ZSH hooks disabled! Functionality may be limited!"
      else
        _rick_set_config_value "zsh_hooks.enabled" "true"
        echo "ZSH hooks enabled!"
      fi
      read -k 1 -s
      _rick_menu_general_settings_simple_arrows  # Refresh menu after returning
      ;;
    5)
      # Toggle Powerlevel10k Integration
      if [[ "$p10k_integration" == "true" ]]; then
        _rick_set_config_value "p10k_integration.enabled" "false"
        echo "Powerlevel10k integration disabled!"
      else
        _rick_set_config_value "p10k_integration.enabled" "true"
        echo "Powerlevel10k integration enabled!"
      fi
      read -k 1 -s
      _rick_menu_general_settings_simple_arrows  # Refresh menu after returning
      ;;
    6)
      # Back to Settings Menu
      return 0
      ;;
  esac
  
  return 0
}

# Execute the function if called directly
if [[ "${FUNCNAME[0]}" == '_rick_menu_main' ]]; then
  _rick_menu_main "$@"
fi
